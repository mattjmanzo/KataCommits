// Colored Triangles

// A coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is used in the new row. This is continued until the final row, with only a single colour, is generated.

// You will be given the first row of the triangle as a string and its your job to return the final colour which would appear in the bottom row as a string. In the case of the example above, you would the given RRGBRGBB you should return G.

// Solution 1

const triangle = (row) => {
  let reduced = row.length > 1 ? "" : row;
  for (let i = 0; i < row.length - 1; i += 1) {
    reduced +=
      row[i] == row[i + 1]
        ? row[i]
        : "RGB".replace(row[i], "").replace(row[i + 1], "");
  }
  return reduced.length > 1 ? triangle(reduced) : reduced;
};

// Solution 2

function triangle(row) {
  return row.length == 1 ? row : triangle(processedRow(row));
}

function processedRow(row) {
  return row
    .split("")
    .map((el, i) =>
      i == row.length - 1 ? null : sumLetters(row[i], row[i + 1])
    )
    .join("");
}

function sumLetters(a, b) {
  switch (a + b) {
    case "BG":
    case "GB":
    case "RR":
      return "R";
      break;
    case "BR":
    case "RB":
    case "GG":
      return "G";
      break;
    case "RG":
    case "GR":
    case "BB":
      return "B";
      break;
  }
}
